BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <head> (0x7f212ba1d130), pseudo: Normal }
BROE: [set_flow_construction_result]    result=NONE
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d1c0), pseudo: Normal }
BROE: [set_flow_construction_result]     result=CONSTR-ITEM / WHITESPACE
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d250), pseudo: Normal }
BROE: [create_fragments_for_node_text_content] ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d250), pseudo: Normal } ["X"]
    style=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: inline, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: inline, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 52, green: 0, blue: 52, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 160px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 0px, margin_left: 0px, margin_bottom: 0px, margin_right: 0px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: normal, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: false, writing_mode: , root_font_size: 16px }
BROE: [from_opaque_node_and_style] opacity=1
BROE: [set_flow_construction_result]     result=CONSTR-ITEM / INLINE-FRAG [SpecificFragmentInfo::UnscannedText(0) ["X"] border_box=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)) damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW
    opacity=1]
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <span> (0x7f212ba1d1f0), pseudo: Normal }
BROE: [build_fragments_for_nonreplaced_inline_content] ServoThreadSafeLayoutNode { node: <span> (0x7f212ba1d1f0), pseudo: Normal }
    opacity=0.1
BROE: [from_inline_node] node=ServoThreadSafeLayoutNode { node: <span> (0x7f212ba1d1f0), pseudo: Normal }
    opacity=0.1     -> InlineFragmentsAccumulator
BROE: [----kid] ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d250), pseudo: Normal }
BROE: [----enclosing_node] opacity=0.1
BROE: [build_fragments_for_nonreplaced_inline_content] construction_item=---
BROE: [set_flow_construction_result]     result=CONSTR-ITEM / INLINE-FRAG [SpecificFragmentInfo::UnscannedText(0) ["X"] border_box=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)) damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW
    opacity=1]
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d280), pseudo: Normal }
BROE: [set_flow_construction_result]     result=CONSTR-ITEM / WHITESPACE
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d310), pseudo: Normal }
BROE: [create_fragments_for_node_text_content] ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d310), pseudo: Normal } ["Y"]
    style=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: inline, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: block, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 35, green: 0, blue: 35, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 160px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 0px, margin_left: 0px, margin_bottom: 0px, margin_right: 0px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: isolate, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: false, writing_mode: , root_font_size: 16px }
BROE: [from_opaque_node_and_style] opacity=1
BROE: [set_flow_construction_result]     result=CONSTR-ITEM / INLINE-FRAG [SpecificFragmentInfo::UnscannedText(1) ["Y"] border_box=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)) damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW
    opacity=1]
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <div> (0x7f212ba1d2b0), pseudo: Normal }
BROE: [build_fragment_for_block] node=ServoThreadSafeLayoutNode { node: <div> (0x7f212ba1d2b0), pseudo: Normal }
    opacity=0.1
BROE: [build_flow_for_block_starting_with_fragments]
    flow=FlowRef(Block(7f212b6d4510) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <div> (0x7f212ba1d2b0), pseudo: Normal }
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <div> (0x7f212ba1d2b0), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d4510) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [flush_inline_fragments_to_flow]
    flow=FlowRef(Block(7f212b6d4510) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <div> (0x7f212ba1d2b0), pseudo: Normal }
    opacity=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: block, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: block, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 35, green: 0, blue: 35, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 0.1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 160px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 0px, margin_left: 0px, margin_bottom: 0px, margin_right: 0px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: isolate, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: false, writing_mode: , root_font_size: 16px }
BROE: [----fragment] SpecificFragmentInfo::UnscannedText(1) ["Y"] border_box=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)) damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW
    opacity=1
BROE: [set_flow_construction_result]    result=FLOW
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <text node> (0x7f212ba1d340), pseudo: Normal }
BROE: [set_flow_construction_result]     result=CONSTR-ITEM / WHITESPACE
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
BROE: [build_fragment_for_block] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    opacity=1
BROE: [build_flow_for_block_starting_with_fragments]
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [from_opaque_node_and_style] opacity=1
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [from_opaque_node_and_style] opacity=1
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [flush_inline_fragments_to_flow]
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    opacity=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: block, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: block, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 0, green: 0, blue: 0, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 16px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 8px, margin_left: 8px, margin_bottom: 8px, margin_right: 8px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: normal, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: true, writing_mode: , root_font_size: 16px }
BROE: [----fragment] SpecificFragmentInfo::UnscannedText(0) ["X"] border_box=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)) damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW
    opacity=1
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } children=2 damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [from_opaque_node_and_style] opacity=1
BROE: [flush_inline_fragments_to_flow]
    flow=FlowRef(Block(7f212b6d5410) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } children=2 damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <body> (0x7f212ba1d160), pseudo: Normal }
    opacity=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: block, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: block, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 0, green: 0, blue: 0, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 16px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 8px, margin_left: 8px, margin_bottom: 8px, margin_right: 8px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: normal, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: true, writing_mode: , root_font_size: 16px }
BROE: [set_flow_construction_result]    result=FLOW
BROE: [F.C./process] node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
BROE: [build_fragment_for_block] node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
    opacity=1
BROE: [build_flow_for_block_starting_with_fragments]
    flow=FlowRef(Block(7f212b6d6310) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d6310) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [build_block_flow_using_construction_result_of_child] node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
    flow=FlowRef(Block(7f212b6d6310) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
BROE: [flush_inline_fragments_to_flow]
    flow=FlowRef(Block(7f212b6d6310) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
    opacity=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: block, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: block, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 0, green: 0, blue: 0, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 16px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 0px, margin_left: 0px, margin_bottom: 0px, margin_right: 0px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: normal, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: true, writing_mode: , root_font_size: 16px }
BROE: [flush_inline_fragments_to_flow]
    flow=FlowRef(Block(7f212b6d6310) sc=StackingContextId(0) pos=LogicalRect(H LTR, i0px×b0px, @ (i0px,b0px)),  floatspec-in=L 0px R 0px, floatspec-out=L 0px R 0px, overflow=Overflow { scroll: TypedRect(0px×0px at (0px,0px)), paint: TypedRect(0px×0px at (0px,0px)) } children=1 damage=REPAINT | REPOSITION | STORE_OVERFLOW | BUBBLE_ISIZES | REFLOW_OUT_OF_FLOW | REFLOW)
    node=ServoThreadSafeLayoutNode { node: <html> (0x7f212ba1d100), pseudo: Normal }
    opacity=ComputedValues { background: Background { background_color: RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 }), background_image: T([T(None)]), background_position_x: T([HorizontalPosition(0%)]), background_position_y: T([VerticalPosition(0%)]), background_repeat: T([repeat]), background_attachment: T([scroll]), background_clip: T([border_box]), background_origin: T([padding_box]), background_size: T([Explicit(ExplicitSize { width: auto, height: auto })]) }, border: Border { border_top_color: CurrentColor, border_left_color: CurrentColor, border_bottom_color: CurrentColor, border_right_color: CurrentColor, border_block_start_color: CurrentColor, border_block_end_color: CurrentColor, border_inline_start_color: CurrentColor, border_inline_end_color: CurrentColor, border_top_style: none, border_left_style: none, border_bottom_style: none, border_right_style: none, border_block_start_style: none, border_block_end_style: none, border_inline_start_style: none, border_inline_end_style: none, border_top_width: 0px, border_left_width: 0px, border_bottom_width: 0px, border_right_width: 0px, border_block_start_width: 3px, border_block_end_width: 3px, border_inline_start_width: 3px, border_inline_end_width: 3px, border_top_left_radius: BorderRadiusSize(0px×0px), border_top_right_radius: BorderRadiusSize(0px×0px), border_bottom_right_radius: BorderRadiusSize(0px×0px), border_bottom_left_radius: BorderRadiusSize(0px×0px) }, box_: Box { display: block, position: static_, float: none, clear: none, _servo_display_for_hypothetical_box: block, vertical_align: baseline, _servo_overflow_clip_box: padding_box, overflow_x: visible, overflow_y: SpecifiedValue(visible), transition_duration: T([Time(0)]), transition_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), transition_property: T([]), transition_delay: T([Time(0)]), animation_name: T([]), animation_duration: T([Time(0)]), animation_timing_function: T([CubicBezier((0.25,0.1), (0.25,1))]), animation_iteration_count: T([Number(1)]), animation_direction: T([normal]), animation_play_state: T([running]), animation_fill_mode: T([none]), animation_delay: T([Time(0)]), transform: T(None), perspective: none, perspective_origin: T { horizontal: 50%, vertical: 50% }, backface_visibility: visible, transform_style: auto, transform_origin: T { horizontal: 50%, vertical: 50%, depth: 0px } }, color: Color { color: RGBA { red: 0, green: 0, blue: 0, alpha: 255 } }, column: Column { column_width: auto, column_count: T(None), column_gap: normal }, counters: Counters { content: normal, counter_increment: T([]), counter_reset: T([]) }, effects: Effects { opacity: 1, box_shadow: T([]), clip: auto, filter: T { filters: [] }, mix_blend_mode: normal }, font: Font { font_family: T([Generic(Atom('serif' type=static))]), font_style: normal, font_variant: normal, font_weight: Weight400, font_size: 16px, font_stretch: normal, hash: 0 }, inheritedbox: InheritedBox { visibility: visible, writing_mode: horizontal_tb, direction: ltr, image_rendering: auto, _servo_under_display_none: SpecifiedValue(false) }, inheritedtable: InheritedTable { border_collapse: separate, empty_cells: show, caption_side: top, border_spacing: T { horizontal: 0px, vertical: 0px } }, inheritedtext: InheritedText { line_height: Normal, text_transform: none, text_indent: 0px, overflow_wrap: normal, word_break: normal, text_justify: auto, text_align: start, letter_spacing: T(None), word_spacing: T(None), _servo_text_decorations_in_effect: SpecifiedValue { underline: None, overline: None, line_through: None }, white_space: normal, text_shadow: T([]), text_rendering: auto }, list: List { list_style_position: outside, list_style_type: disc, list_style_image: none, quotes: T([("“", "”"), ("‘", "’")]) }, margin: Margin { margin_top: 0px, margin_left: 0px, margin_bottom: 0px, margin_right: 0px, margin_block_start: 0px, margin_block_end: 0px, margin_inline_start: 0px, margin_inline_end: 0px }, outline: Outline { outline_color: CurrentColor, outline_style: none, outline_width: 0px, outline_offset: 0px }, padding: Padding { padding_top: 0px, padding_left: 0px, padding_bottom: 0px, padding_right: 0px, padding_block_start: 0px, padding_block_end: 0px, padding_inline_start: 0px, padding_inline_end: 0px }, pointing: Pointing { cursor: AutoCursor, pointer_events: auto }, position: Position { top: auto, left: auto, bottom: auto, right: auto, offset_block_start: auto, offset_block_end: auto, offset_inline_start: auto, offset_inline_end: auto, z_index: Auto, flex_direction: row, flex_wrap: nowrap, justify_content: stretch, align_items: stretch, align_content: stretch, flex_grow: 0, flex_shrink: 1, align_self: stretch, order: 0, flex_basis: auto, width: auto, min_width: 0px, max_width: none, height: auto, min_height: 0px, max_height: none, block_size: auto, min_block_size: 0px, max_block_size: none, inline_size: auto, min_inline_size: 0px, max_inline_size: none, box_sizing: content_box }, table: Table { table_layout: auto }, text: Text { text_overflow: SpecifiedValue { first: Clip, second: None }, unicode_bidi: normal, text_decoration: SpecifiedValue { underline: false, overline: false, line_through: false, blink: false } }, custom_properties: None, shareable: true, writing_mode: , root_font_size: 16px }
BROE: [set_flow_construction_result]    result=FLOW
